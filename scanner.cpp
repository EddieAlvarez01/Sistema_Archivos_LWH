#line 2 "scanner.cpp"

#line 4 "scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 79
#define YY_END_OF_BUFFER 80
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[248] =
    {   0,
       69,   69,   80,   78,   75,   77,   76,   78,   78,   74,
       73,   71,   69,   69,    3,    3,    3,   70,   72,   69,
       38,   41,   69,   50,   69,   69,   69,   69,   39,   51,
       40,   69,   49,   33,   69,   69,   69,   69,    0,    4,
        0,    2,   69,   69,   69,   69,   69,   69,    3,   69,
       69,   69,   69,   43,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   44,   69,   45,   69,   69,   35,   69,
       42,   69,   68,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   66,   69,   69,   69,   69,   69,   69,   48,
       46,   47,   17,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,    8,   69,   29,   35,   69,   69,
       69,   57,   69,   69,   69,   69,   69,   69,   69,   23,
       69,   36,   69,   69,   69,   69,   69,   69,   69,   34,
       69,   69,   22,   69,   69,   69,   69,   69,   69,   69,
        7,   69,   69,   58,   37,   52,   69,   53,   69,   69,
       69,   55,   69,   69,   20,   69,   69,   69,   16,   10,
       69,   69,   69,   69,   54,    6,   69,   13,    9,   69,
       69,   69,   69,   69,   69,   69,   30,   69,   69,   12,
       69,   21,   69,   32,   69,   69,   25,   27,   18,   69,
       69,   26,   28,   69,   69,   69,   69,   69,   69,   69,

       69,   15,   69,   69,   24,    5,   31,   69,   11,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,    1,
       69,   69,   69,   19,   69,   63,   69,   62,   69,   61,
       69,   56,   69,   69,   69,   59,   60,   69,   69,   65,
       14,   64,   69,   69,   69,   67,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    7,    8,    1,    1,
        1,    1,    1,    1,    9,   10,   11,   12,   12,   13,
       14,   12,   12,   12,   12,   12,   12,    1,    1,    1,
       15,   16,    1,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       26,   33,   34,   35,   36,   37,   38,   39,   40,   41,
        1,    1,    1,    1,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   26,   52,   53,   54,   55,
       56,   57,   26,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   26,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   26,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   26,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    1,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2
    } ;

static const flex_int16_t yy_base[252] =
    {   0,
        0,    0,  100, 2504, 2504, 2504, 2504,   93,   94, 2504,
     2504, 2504,   57,   62,   67,   72,   79, 2504, 2504,  118,
      162,  207,   86,   97,  247,  134,  161,  289,  174,  332,
      374,  207,  414,  457,  208,  497,  543,  217,   91, 2504,
       92, 2504,  274,  310,  320,  248,  288,  316,  336,  399,
      461,  159,  351,  338,  399,  486,  458,  430,  497,  588,
      494,  526,  459,  545,  566,  546,  558,  603,  626,  594,
      633,  666,  642,  650,  706,  705,  651,  714,  639,  756,
      132,  743,  741,  780,  794,  797,  248,  809,  826,  840,
      842,  850,  860,  868,  888,  935,  882,  898,  938,  945,

      943,  984,  978,  989, 1000, 1019, 1024,  780, 1047, 1052,
     1066, 1067, 1066, 1087, 1104, 1102, 1023, 1124, 1127, 1129,
     1154, 1156, 1167, 1172, 1200, 1202, 1214, 1242, 1251, 1252,
     1253, 1239, 1290, 1291, 1293, 1315, 1340, 1348, 1364, 1350,
     1361, 1378, 1382, 1390, 1402, 1410, 1408, 1432, 1446, 1423,
     1431, 1452, 1497, 1473, 1460, 1493, 1514, 1529, 1546, 1551,
     1557, 1568, 1579, 1596, 1600, 1611, 1373, 1657, 1666, 1671,
     1676, 1502, 1684, 1710, 1723, 1732, 1673, 1729, 1751, 1753,
     1773, 1771, 1795, 1801, 1806, 1817, 1836, 1841, 1847, 1863,
     1852, 1882, 1887, 1934, 1856, 1920, 1903, 1958, 1975, 1985,

     1996, 1973, 1995, 2005, 2023, 2025, 2028, 2055, 2056, 2079,
     2091, 2088, 1903, 2109, 2154, 2159, 2164, 2170, 2095, 2165,
     2170, 2215, 2220, 2216, 2219, 2222, 2269, 2052, 2274, 2279,
     2272, 2274, 2323, 2328, 2323, 2334, 2346, 2346, 2371, 2381,
     2378, 2383, 2405, 2430, 2445, 2457, 2504, 2499, 2501,   86,
       85
    } ;

static const flex_int16_t yy_def[252] =
    {   0,
      247,    1,  247,  247,  247,  247,  247,  248,  249,  247,
      247,  247,  250,  251,  251,  251,  251,  247,  247,  251,
      251,  251,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   28,   21,  248,  247,
      249,  247,  250,  250,  250,   21,   21,   21,  251,  251,
      251,   28,   28,   28,   28,  251,   21,   28,   28,   28,
       28,   28,   21,   21,   21,   21,   21,   21,  251,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   28,   28,
       75,   28,   28,   28,   28,   28,   31,   21,   21,   21,
       21,   21,   21,   31,   31,  250,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,  251,  251,   31,
       31,   31,   21,   21,   21,   21,   28,   28,   28,   28,
       31,   31,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   31,   31,   31,   31,  250,  250,  250,  250,   28,
       28,   28,   28,   28,   28,   28,   31,   31,   21,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,  251,  251,  251,  251,
      251,   31,  250,  250,  250,  250,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,  250,   28,   28,   28,  250,  250,  250,

      250,   28,   31,   31,   31,   31,   31,   31,   31,  250,
      250,   31,   21,   21,  250,  250,  250,  250,   21,   21,
       21,  250,  250,   21,   31,   31,  250,  250,  250,  250,
       21,   21,  250,  250,   28,  250,  250,   31,  250,  250,
       31,   31,  250,  250,  250,  250,    0,  247,  247,  247,
      247
    } ;

static const flex_int16_t yy_nxt[2571] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   27,   29,   30,   31,   32,
       27,   33,   34,   35,   36,   37,   27,   38,   27,   27,
       27,   13,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   27,   33,   34,   35,   36,
       37,   27,   38,   27,   27,   27,   43,   43,   44,   44,
       44,   43,   46,   47,   47,   47,   43,   46,   49,   49,
       49,   43,   46,   49,   49,   49,   48,   45,   43,   46,
       49,   49,   49,   50,   42,   40,   42,   40,   43,  247,

       51,  247,  247,   43,  247,  247,   59,   48,   43,  247,
       60,  247,  247,   43,   48,  247,  247,  247,   48,   50,
       43,   48,  247,  247,  247,   48,   51,   43,   46,   47,
       47,   47,   59,   48,  247,   61,   60,   52,  247,   48,
      247,  247,  247,  247,   48,   53,  247,   48,  247,  247,
       48,  123,  247,   48,  124,   48,  247,  247,   48,   43,
       61,  247,   48,   52,  247,  247,   68,  125,  247,  247,
       53,   43,   46,   47,   47,   47,  247,  123,   93,   48,
      124,   48,   48,   54,   48,   48,   55,   48,   48,   48,
       56,   68,  125,  247,  247,   48,  247,   48,   48,  247,

      247,  247,   48,   43,   93,  247,  247,  247,   48,   54,
      247,   48,   55,   48,   48,   56,   43,   46,   47,   47,
       47,   48,   48,   77,   48,   83,  247,   48,   48,   48,
       57,   48,   84,  247,  247,   48,   48,   58,   90,  247,
      247,   48,  247,  247,  247,   48,  247,  247,   43,   77,
      247,   83,  247,  247,   48,   48,   57,   48,   84,  247,
       48,   48,   58,   62,   90,   48,   63,   48,   64,   48,
       48,   65,   48,  247,   48,   48,   48,  247,  130,  247,
       66,  247,   67,   43,   43,   44,   44,   44,  247,   62,
      247,   48,   63,  247,   64,   48,  247,   65,   48,   48,

       48,   48,  247,  130,  247,   66,  247,   67,   69,   48,
       48,  247,   48,   48,  247,   43,   48,   48,   70,   43,
       43,   44,   44,   44,  247,  247,  247,   71,  247,   43,
       43,   44,   44,   44,   69,   48,   48,   48,   48,   48,
       48,   48,   48,   70,   48,   43,   46,   49,   49,   49,
      247,   43,   71,   48,  247,  247,   48,   48,  247,  247,
       48,   43,   72,   48,  247,   73,   48,   48,  247,   48,
       48,  247,  247,  247,  247,  247,   48,   43,   94,   48,
       48,  247,   48,   48,  247,   48,  247,   72,  247,   48,
       73,   74,   48,  247,  247,   48,   48,  247,   48,  247,

       75,   48,   48,   94,   76,   48,  247,  247,   43,   46,
       47,   47,   47,  247,   48,  247,  247,   74,   48,  247,
      247,   48,  247,  247,   48,   75,  247,   48,   48,   76,
       78,  247,   91,   95,  247,   48,  247,   48,   48,  247,
       43,  247,   48,  247,   48,  247,  247,  247,  247,   48,
      247,   79,  247,   48,  247,  247,   78,   91,   95,   98,
      247,   48,   48,  247,   48,  247,  247,   48,   48,  247,
       43,   46,   47,   47,   47,   48,   79,   80,   48,   48,
       48,   48,   48,  104,   98,   81,   97,   48,  247,  247,
      247,  247,   82,   48,   92,   43,   46,   47,   47,   47,

      247,  247,   43,   80,   48,   48,   48,   48,   48,  104,
       81,   97,   48,   48,  102,  247,   48,   82,   48,   92,
      247,   48,  247,   48,   99,   48,   48,   96,  247,   85,
      247,  247,   48,  247,  247,   48,   86,  247,  247,   48,
      102,  247,   48,  247,   48,   48,  247,   48,   48,   99,
       48,   48,  247,  247,   85,   48,  247,   48,  247,  103,
       48,   86,   48,  247,   48,   87,   48,   48,  247,   48,
       48,   48,   88,   48,   48,  247,   89,  247,  247,   48,
       48,   48,   48,  247,  103,  106,   48,   48,   48,   48,
       48,   87,   48,   48,   48,   48,   48,   88,   48,   48,

      105,   89,  247,  247,  247,   48,   48,   48,   48,  247,
      106,   48,  247,   48,  247,   48,   48,   48,  109,   48,
      100,  101,   48,  247,   48,  105,   48,   48,  247,  247,
      247,   48,  247,   48,  107,   43,   46,  108,  108,  108,
      247,   48,   48,  247,  109,  100,  101,   48,  247,  247,
       48,   48,  247,   48,   48,  247,   48,   48,  120,  107,
      247,   48,  247,   48,  247,  247,   48,   43,   48,  247,
       48,   48,   48,  247,   48,   48,  247,   48,   48,  118,
       48,  247,  112,   48,  120,  247,   48,   48,  110,   48,
       48,  247,   48,   48,   48,   48,  247,   48,   48,  111,

       48,   48,   48,   48,  118,  247,  247,  112,  247,  247,
      247,  247,  247,   48,  110,  247,   48,  247,  247,   48,
      247,  247,  247,  247,  111,  113,   48,  114,  115,   48,
       48,  247,  247,   48,   48,   48,  247,  247,   48,  247,
      117,  116,   48,  247,  247,  247,  247,  247,  119,  247,
      247,  113,   48,  114,  115,   48,   48,  247,   48,   48,
       48,   48,   48,  247,   48,  117,  116,   48,  247,  247,
       48,  247,   48,  119,  121,   48,  247,  126,  247,   48,
      247,   48,  247,  247,  247,   48,   48,  122,   48,   43,
       46,  108,  108,  108,   48,   48,  247,   48,  247,   48,

      121,   48,  126,  247,   48,  247,   48,  247,  247,   48,
       48,  247,  122,   48,  128,  247,   48,  247,   48,   48,
      127,   43,  247,   48,  247,   48,   48,  247,  129,  247,
       48,  247,   48,  131,   48,   48,  247,  132,  247,   48,
      128,  247,   48,   48,  247,  127,  247,   48,   48,  247,
       48,   48,  247,  129,   48,  247,   48,   48,  133,  131,
       48,   48,  132,   48,   48,  247,   48,  247,   48,  247,
       48,   48,  247,   48,   48,  247,   48,  247,   48,   48,
      247,   48,  247,  133,   48,   48,  247,   48,   48,   48,
       48,  247,   48,   48,   48,   48,  247,   48,  134,   48,

       48,  247,  247,   48,  135,   48,  247,   48,   48,  247,
       48,   48,  140,   48,   48,   48,  247,  247,   48,   48,
      247,  247,  247,  134,   48,   48,  247,  247,   48,  247,
      135,   48,  141,   48,  247,  247,  247,  140,  247,   48,
      247,   48,  247,   48,   43,   43,   44,   44,   44,   48,
      247,  136,  137,   48,  138,   48,  247,  141,  142,  139,
       48,  247,   48,  247,   48,  143,  247,  247,   48,  144,
      247,   48,  247,   48,  247,   48,   43,  136,  137,  247,
      138,   48,  247,  247,  142,  139,   48,  247,   48,   48,
      247,  143,  247,   48,  144,   48,   48,  247,   48,  247,

       48,   48,  145,  247,   48,  247,   48,  247,   48,  247,
       48,  247,  146,  247,   48,   48,  247,   48,  247,   48,
      247,   48,  147,  247,  247,  247,   48,   48,  145,   48,
       48,  247,   48,   48,  247,   48,   48,  146,  247,   48,
       48,   48,   48,   48,   48,   48,  148,  147,  247,   48,
       48,   48,  158,  247,   48,   48,   43,   46,   47,   47,
       47,   48,   48,  247,  247,  247,  247,   48,   48,   48,
       48,  148,  247,  247,   48,   48,  150,  158,   48,   48,
      247,  149,  151,   48,   48,  247,   48,   48,   43,  247,
      153,  247,   48,   48,   48,   48,   48,   48,  247,  152,

      247,  247,  150,   48,  247,  247,  149,  151,   48,   48,
       48,  154,  247,   48,  247,   48,  153,   48,   48,   48,
      155,   48,   48,   48,  152,   48,   48,  247,   48,  247,
       48,  247,   48,  247,   48,  157,  156,  154,  247,  247,
       48,  247,  247,   48,  159,  155,   48,  247,   48,   48,
      160,   48,   48,   48,   48,   48,   48,   48,   48,  247,
      157,  156,   48,  247,  247,   48,  247,   48,  247,   48,
      159,   48,   48,   48,   48,  247,  160,  247,   48,  247,
       48,   48,   48,   48,  161,  247,   48,   48,   48,  247,
       48,  162,   48,   48,  247,   48,   48,   48,  247,   48,

       48,  247,  247,  247,  163,   48,  247,   48,  247,  161,
      247,   48,  247,  247,   48,  247,  247,  162,  165,   48,
       48,   48,   48,   48,   48,   48,   48,  247,   48,  163,
       48,  247,  247,  164,  166,   48,  247,  247,   48,  247,
      247,  247,   48,  247,  165,  247,  247,   48,  247,   48,
       48,  247,   48,   48,  247,   48,   48,  247,  164,  247,
      166,   48,  167,   48,   48,   48,   48,   48,  247,  170,
       48,  168,   48,   48,   48,   48,   48,   48,  247,   48,
       48,   48,   48,  247,  247,  247,  247,  169,  167,   48,
       48,  247,   48,  247,  170,   48,  247,  168,   48,   48,

       48,   48,   48,   48,   48,   48,   48,   48,   48,  171,
       48,  172,  169,  247,  247,  247,   48,   48,  247,   48,
       48,   48,  247,   48,   43,   43,   44,   44,   44,  247,
      247,  247,  247,   48,   48,  171,   48,  172,  247,  247,
      247,   48,   48,  247,   48,   48,   48,  173,   48,   43,
       43,   44,   44,   44,  247,  247,   43,   43,   43,   44,
       44,   44,  247,  247,  247,  247,  247,  174,  175,  177,
      247,  247,  173,   43,   43,   44,   44,   44,  247,   48,
       48,   43,   43,   46,   47,   47,   47,  247,   48,   43,
       48,  247,  174,  176,  175,  177,  247,   48,  247,   48,

      179,   48,  247,  247,   48,   43,   48,   48,  247,   48,
      247,   48,  178,   48,  194,   48,   48,  247,  176,   48,
       48,   48,  247,   48,   48,   48,  179,   48,   48,   48,
      247,   48,   48,  247,  180,   48,   48,  178,   48,   48,
       48,   48,   48,  247,   48,   48,  247,   48,   48,   48,
       48,   48,  182,   48,  247,   48,   48,  247,   48,  180,
       48,   48,   48,   48,   48,   48,  183,   48,   48,   48,
      181,   48,  247,   48,   48,   48,   48,  182,  247,   48,
      247,   48,  247,   48,  247,   48,   48,   48,  247,   48,
       48,  183,   48,   48,   48,  247,  181,   48,   48,   48,

      186,  247,   48,  247,  247,   48,   48,  247,  247,  247,
      247,   48,   48,  247,   48,   48,   48,  247,   48,   48,
      247,  247,   48,   48,  187,  186,   48,   48,   48,  184,
      185,   48,  197,   48,  247,   48,   48,  247,   48,  247,
      247,  247,   48,   48,  247,   48,  188,   48,   48,  187,
      247,   48,   48,   48,  184,  185,   48,  197,   48,   48,
       48,  247,  247,  189,  247,   48,  247,   48,   48,  247,
       48,  188,  247,  247,   48,   48,   48,   48,  247,  247,
       48,  247,  247,   48,   48,  247,   48,   48,  189,   48,
      247,   48,   48,  190,  247,   48,   48,   48,   48,  247,

       48,  191,   48,  247,  247,   48,   48,  247,   48,   48,
      192,   48,  247,   48,   48,   48,  247,   48,  190,   48,
       48,  247,   48,  247,   48,   48,  191,  247,  193,   48,
       48,   48,  247,   48,   48,  192,  247,  247,   48,  247,
       48,   48,   48,  247,  247,   48,  247,  247,  247,   48,
       48,  247,  247,  193,   48,  247,   48,  247,  247,   48,
      247,  247,  247,   48,  247,   48,   43,   46,   47,   47,
       47,  247,  247,  247,   48,   43,   46,   47,   47,   47,
       43,   46,   47,   47,   47,   43,   46,   47,   47,   47,
       48,  247,  196,   43,   43,   44,   44,   44,   43,   48,

      247,  198,  247,   48,  247,  247,  195,   43,  247,  247,
      247,  247,   43,  247,  247,  247,   48,   43,  196,   43,
       43,   44,   44,   44,   48,   43,  247,  198,   48,  247,
      247,  195,   43,   43,   44,   44,   44,  247,  247,  247,
      199,   43,   43,   44,   44,   44,   48,  247,  247,  202,
      247,   43,  247,  247,  247,   48,  247,  200,  247,   48,
      247,  247,  201,  247,   43,  199,  247,  247,   48,  247,
       48,  247,   48,   43,  247,  202,  247,   48,  247,   48,
       48,   48,  200,   48,   48,  203,  247,  201,   48,  204,
       48,  247,  247,  247,   48,  247,   48,   48,  247,   48,

      247,   48,   48,   48,   48,  247,   48,  247,   48,  247,
      203,  247,   48,  247,   48,  204,   48,  247,   48,  247,
      247,   48,   48,   48,   48,   48,   48,   48,   48,  205,
      247,   48,  206,  247,   48,  247,   48,  207,   48,  247,
      247,  247,  247,   48,   48,  247,   48,   48,  247,   48,
       48,  247,   48,   48,  205,  247,   48,  206,   48,  247,
       48,   48,   48,  207,   48,  247,   48,   48,   48,   48,
      247,   48,   48,   48,  247,   48,  247,   48,  209,   48,
       48,  247,   48,  208,   48,  212,  247,   48,  247,   48,
       48,   48,   48,   48,   48,   48,   48,  247,   48,   48,

      247,   48,   48,  209,   48,  247,   48,   48,   48,  208,
      212,  247,   48,   48,   48,  247,  247,   48,   48,   48,
      247,  247,   48,  247,   48,   48,  247,  225,  247,  247,
       48,   48,   48,   48,  247,  214,  247,   48,   48,   48,
      247,   48,   48,   43,   43,   44,   44,   44,   48,   48,
       48,  247,  210,  225,  213,  211,   48,   48,   48,  247,
      214,  247,  247,  247,  247,   48,   48,   43,   43,   44,
       44,   44,  247,  247,   48,   43,  247,  215,  210,  213,
      247,  211,  247,   48,   43,   43,   44,   44,   44,  247,
      247,  247,   48,  216,   43,   43,   44,   44,   44,   43,

      247,  247,   48,  215,  217,   43,   43,   44,   44,   44,
      247,   48,   48,  247,  247,  218,   43,  247,   48,  216,
      247,   48,   48,  247,  247,  219,   43,   48,  247,  247,
      217,   48,  220,  247,  247,   48,   48,   43,   48,  247,
       48,  218,   48,  247,  247,   48,   48,  247,   48,   48,
      219,   48,  247,   48,   48,   48,   48,  220,   48,  247,
       48,   43,   43,   44,   44,   44,   48,  247,   48,  247,
      247,   48,   48,   48,   48,  247,   48,  247,   48,   48,
       48,   48,   48,   48,  247,   48,   48,  221,   43,   43,
       44,   44,   44,   43,  247,  247,  247,  247,   48,   48,

       43,   43,   44,   44,   44,   48,   48,   48,  247,  222,
       48,   48,  221,  247,   48,  223,   48,  247,   48,   48,
       43,  247,  224,   48,  247,  226,  247,  231,  247,  247,
       48,   48,   43,   48,  222,  247,  247,   48,  247,   48,
      247,  223,   48,   48,  247,   48,  247,  224,   48,  247,
      247,  226,  231,  247,  247,  247,   48,  247,  247,   48,
      247,  247,   48,   43,   43,   44,   44,   44,   43,   43,
       44,   44,   44,   43,   43,   44,   44,   44,  227,   43,
       43,   44,   44,   44,  247,  228,   48,  247,  229,   48,
      230,   48,  247,   48,   48,   43,  247,  247,   48,  247,

       43,  247,  247,  247,  227,   43,  247,  247,  247,  232,
      228,   43,   48,  247,  229,   48,  230,   48,   48,  247,
       48,  247,  247,   48,   43,   43,   44,   44,   44,   43,
       43,   44,   44,   44,  232,  247,   48,   48,  247,   48,
       48,  247,  247,  233,   48,   48,  247,  234,   48,  235,
      247,  247,   48,  247,  247,  247,   43,  247,  247,  247,
      247,   43,   48,   48,  247,   48,   48,  247,  233,   48,
       48,  247,  234,   48,  235,  247,  247,   48,   43,   43,
       44,   44,   44,   43,   43,   44,   44,   44,   43,   43,
       44,   44,   44,   48,  247,   48,  238,  247,   48,  247,

       48,  236,   48,  247,  247,  247,  237,  247,  247,  247,
       43,  247,  247,  247,  247,   43,  247,  247,  247,   48,
       43,   48,  238,  247,   48,   48,  236,   48,  247,  247,
      247,  237,   43,   43,   44,   44,   44,   43,   43,   44,
       44,   44,   48,   43,   43,   44,   44,   44,  240,  247,
      247,  247,  241,  247,  239,   43,   43,   44,   44,   44,
      247,   48,  247,   48,   43,  247,  247,  247,   48,   43,
      247,  247,   48,  247,  240,   43,  242,  241,  247,  239,
       43,   43,   44,   44,   44,  247,   48,   43,  247,   48,
       43,   43,   44,   44,   44,   48,  247,   48,  243,  247,

       48,  242,  247,  247,   48,  247,  247,  247,   48,   48,
      247,  247,   43,   48,   43,   43,   44,   44,   44,  247,
      247,   48,   43,  243,  247,  244,   48,  247,  247,   48,
      247,  247,  247,   48,   48,  247,  247,  247,   48,   43,
       43,   44,   44,   44,  247,  247,   43,  247,  247,  247,
      247,  244,  247,  247,   43,   43,   44,   44,   44,  247,
      247,  247,  247,  247,  245,  246,   43,   43,   44,   44,
       44,   43,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,   43,  247,  247,  245,
      247,  246,  247,  247,  247,  247,  247,  247,   43,   39,

       39,   41,   41,    3,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247
    } ;

static const flex_int16_t yy_chk[2571] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   13,   13,   13,   13,
       13,   14,   14,   14,   14,   14,   15,   15,   15,   15,
       15,   16,   16,   16,   16,   16,  251,  250,   17,   17,
       17,   17,   17,   16,   41,   39,    9,    8,   13,    3,

       17,    0,    0,   14,    0,    0,   23,   23,   15,    0,
       23,    0,    0,   16,   23,    0,    0,    0,   24,   16,
       17,   24,    0,    0,    0,   24,   17,   20,   20,   20,
       20,   20,   23,   23,    0,   24,   23,   20,    0,   23,
        0,    0,    0,    0,   24,   20,    0,   24,    0,    0,
       24,   81,    0,   81,   81,   26,    0,    0,   26,   20,
       24,    0,   26,   20,    0,    0,   26,   81,    0,    0,
       20,   21,   21,   21,   21,   21,    0,   81,   52,   81,
       81,   26,   27,   21,   26,   27,   21,   26,   52,   27,
       21,   26,   81,    0,    0,   29,    0,   52,   29,    0,

        0,    0,   29,   21,   52,    0,    0,    0,   27,   21,
        0,   27,   21,   52,   27,   21,   22,   22,   22,   22,
       22,   29,   52,   32,   29,   35,    0,   29,   32,   35,
       22,   32,   35,    0,    0,   32,   35,   22,   38,    0,
        0,   38,    0,    0,    0,   38,    0,    0,   22,   32,
        0,   35,    0,    0,   32,   35,   22,   32,   35,    0,
       32,   35,   22,   25,   38,   87,   25,   38,   25,   46,
       38,   25,   46,    0,   87,   25,   46,    0,   87,    0,
       25,    0,   25,   43,   43,   43,   43,   43,    0,   25,
        0,   87,   25,    0,   25,   46,    0,   25,   46,   87,

       25,   46,    0,   87,    0,   25,    0,   25,   28,   47,
       28,    0,   47,   28,    0,   43,   47,   28,   28,   44,
       44,   44,   44,   44,    0,    0,    0,   28,    0,   45,
       45,   45,   45,   45,   28,   47,   28,   48,   47,   28,
       48,   47,   28,   28,   48,   49,   49,   49,   49,   49,
        0,   44,   28,   30,    0,    0,   30,   54,    0,    0,
       30,   45,   30,   48,    0,   30,   48,   54,    0,   48,
       53,    0,    0,    0,    0,    0,   54,   49,   53,   30,
       53,    0,   30,   54,    0,   30,    0,   30,    0,   53,
       30,   31,   54,    0,    0,   31,   53,    0,   31,    0,

       31,   54,   31,   53,   31,   53,    0,    0,   50,   50,
       50,   50,   50,    0,   53,    0,    0,   31,   55,    0,
        0,   31,    0,    0,   31,   31,    0,   31,   55,   31,
       33,    0,   50,   55,    0,   33,    0,   55,   33,    0,
       50,    0,   33,    0,   55,    0,    0,    0,    0,   58,
        0,   33,    0,   55,    0,    0,   33,   50,   55,   58,
        0,   33,   55,    0,   33,    0,    0,   33,   58,    0,
       51,   51,   51,   51,   51,   58,   33,   34,   34,   57,
       63,   34,   57,   63,   58,   34,   57,   63,    0,    0,
        0,    0,   34,   58,   51,   56,   56,   56,   56,   56,

        0,    0,   51,   34,   34,   57,   63,   34,   57,   63,
       34,   57,   63,   61,   61,    0,   59,   34,   36,   51,
        0,   36,    0,   61,   59,   36,   59,   56,    0,   36,
        0,    0,   61,    0,    0,   59,   36,    0,    0,   61,
       61,    0,   59,    0,   36,   62,    0,   36,   61,   59,
       36,   59,    0,    0,   36,   62,    0,   61,    0,   62,
       59,   36,   37,    0,   62,   37,   64,   66,    0,   64,
       66,   62,   37,   64,   66,    0,   37,    0,    0,   67,
       62,   37,   67,    0,   62,   67,   67,   65,   37,   62,
       65,   37,   64,   66,   65,   64,   66,   37,   64,   66,

       65,   37,    0,    0,    0,   67,   37,   60,   67,    0,
       67,   67,    0,   65,    0,   70,   65,   60,   70,   65,
       60,   60,   70,    0,   68,   65,   60,   68,    0,    0,
        0,   68,    0,   60,   68,   69,   69,   69,   69,   69,
        0,   70,   60,    0,   70,   60,   60,   70,    0,    0,
       68,   60,    0,   68,   71,    0,   68,   71,   79,   68,
        0,   71,    0,   73,    0,    0,   73,   69,   79,    0,
       73,   74,   77,    0,   74,   77,    0,   79,   74,   77,
       71,    0,   74,   71,   79,    0,   71,   72,   72,   73,
       72,    0,   73,   79,   72,   73,    0,   74,   77,   72,

       74,   77,   79,   74,   77,    0,    0,   74,    0,    0,
        0,    0,    0,   72,   72,    0,   72,    0,    0,   72,
        0,    0,    0,    0,   72,   75,   76,   75,   75,   76,
       75,    0,    0,   76,   75,   78,    0,    0,   78,    0,
       76,   75,   78,    0,    0,    0,    0,    0,   78,    0,
        0,   75,   76,   75,   75,   76,   75,    0,   76,   75,
       83,   78,   82,    0,   78,   76,   75,   78,    0,    0,
       83,    0,   82,   78,   80,   80,    0,   82,    0,   83,
        0,   82,    0,    0,    0,   80,   83,   80,   82,  108,
      108,  108,  108,  108,   80,   83,    0,   82,    0,   84,

       80,   80,   82,    0,   83,    0,   82,    0,    0,   84,
       80,    0,   80,   85,   85,    0,   86,    0,   84,   80,
       84,  108,    0,   85,    0,   84,   86,    0,   86,    0,
       88,    0,   85,   88,   84,   86,    0,   88,    0,   85,
       85,    0,   86,   84,    0,   84,    0,   89,   85,    0,
       89,   86,    0,   86,   89,    0,   88,   85,   89,   88,
       86,   90,   88,   91,   90,    0,   91,    0,   90,    0,
       91,   92,    0,   89,   92,    0,   89,    0,   92,   89,
        0,   93,    0,   89,   93,   94,    0,   90,   93,   91,
       90,    0,   91,   90,   94,   91,    0,   92,   94,   97,

       92,    0,    0,   92,   95,   95,    0,   93,   97,    0,
       93,   94,   97,   93,   95,   98,    0,    0,   95,   94,
        0,    0,    0,   94,   98,   97,    0,    0,   98,    0,
       95,   95,   98,   97,    0,    0,    0,   97,    0,   95,
        0,   98,    0,   95,   96,   96,   96,   96,   96,   98,
        0,   96,   96,   98,   96,   99,    0,   98,   99,   96,
      101,    0,  100,    0,   99,  100,    0,    0,   99,  101,
        0,  100,    0,  101,    0,  100,   96,   96,   96,    0,
       96,   99,    0,    0,   99,   96,  101,    0,  100,   99,
        0,  100,    0,   99,  101,  103,  100,    0,  101,    0,

      100,  102,  102,    0,  103,    0,  104,    0,  103,    0,
      102,    0,  103,    0,  102,  104,    0,  105,    0,  104,
        0,  103,  104,    0,    0,    0,  105,  102,  102,  103,
      105,    0,  104,  103,    0,  102,  106,  103,    0,  102,
      104,  107,  117,  105,  104,  106,  106,  104,    0,  106,
      107,  105,  117,    0,  107,  105,  109,  109,  109,  109,
      109,  117,  106,    0,    0,    0,    0,  107,  117,  110,
      106,  106,    0,    0,  106,  107,  110,  117,  110,  107,
        0,  109,  110,  111,  112,    0,  117,  113,  109,    0,
      113,    0,  111,  112,  113,  110,  111,  112,    0,  111,

        0,    0,  110,  110,    0,    0,  109,  110,  114,  111,
      112,  114,    0,  113,    0,  114,  113,  111,  112,  113,
      114,  111,  112,  116,  111,  115,  116,    0,  115,    0,
      116,    0,  115,    0,  114,  116,  115,  114,    0,    0,
      114,    0,    0,  118,  118,  114,  119,    0,  120,  116,
      119,  115,  116,  118,  115,  116,  119,  115,  120,    0,
      116,  115,  118,    0,    0,  119,    0,  120,    0,  118,
      118,  121,  119,  122,  120,    0,  119,    0,  118,    0,
      121,  119,  122,  120,  121,    0,  122,  118,  123,    0,
      119,  123,  120,  124,    0,  123,  124,  121,    0,  122,

      124,    0,    0,    0,  124,  121,    0,  122,    0,  121,
        0,  122,    0,    0,  123,    0,    0,  123,  126,  124,
      123,  125,  124,  126,  125,  124,  126,    0,  125,  124,
      126,    0,    0,  125,  127,  127,    0,    0,  127,    0,
        0,    0,  127,    0,  126,    0,    0,  125,    0,  126,
      125,    0,  126,  125,    0,  126,  132,    0,  125,    0,
      127,  127,  128,  128,  127,  132,  128,  127,    0,  132,
      128,  129,  129,  130,  131,  129,  130,  131,    0,  129,
      130,  131,  132,    0,    0,    0,    0,  131,  128,  128,
      132,    0,  128,    0,  132,  128,    0,  129,  129,  130,

      131,  129,  130,  131,  129,  130,  131,  133,  134,  134,
      135,  135,  131,    0,    0,    0,  133,  134,    0,  135,
      133,  134,    0,  135,  136,  136,  136,  136,  136,    0,
        0,    0,    0,  133,  134,  134,  135,  135,    0,    0,
        0,  133,  134,    0,  135,  133,  134,  136,  135,  137,
      137,  137,  137,  137,    0,    0,  136,  138,  138,  138,
      138,  138,    0,    0,    0,    0,    0,  137,  138,  140,
        0,    0,  136,  139,  139,  139,  139,  139,    0,  140,
      141,  137,  167,  167,  167,  167,  167,    0,  140,  138,
      141,    0,  137,  139,  138,  140,    0,  142,    0,  141,

      143,  143,    0,    0,  140,  139,  141,  142,    0,  144,
        0,  143,  142,  140,  167,  141,  142,    0,  139,  144,
      143,  145,    0,  142,  141,  147,  143,  143,  144,  146,
        0,  145,  142,    0,  147,  144,  143,  142,  147,  146,
      145,  142,  150,    0,  144,  143,    0,  145,  146,  148,
      151,  147,  150,  144,    0,  146,  145,    0,  148,  147,
      151,  150,  148,  147,  146,  145,  151,  149,  150,  151,
      149,  152,    0,  146,  149,  148,  151,  150,    0,  155,
        0,  152,    0,  148,    0,  151,  150,  148,    0,  155,
      152,  151,  154,  149,  151,    0,  149,  152,  155,  149,

      154,    0,  154,    0,    0,  155,  152,    0,    0,    0,
        0,  154,  156,    0,  155,  152,  153,    0,  154,  172,
        0,    0,  156,  155,  156,  154,  153,  154,  172,  153,
      153,  156,  172,  157,    0,  153,  154,    0,  156,    0,
        0,    0,  153,  157,    0,  172,  157,  156,  158,  156,
        0,  153,  157,  172,  153,  153,  156,  172,  158,  157,
      153,    0,    0,  158,    0,  159,    0,  158,  157,    0,
      160,  157,    0,    0,  158,  159,  161,  157,    0,    0,
      160,    0,    0,  158,  159,    0,  161,  162,  158,  160,
        0,  159,  158,  161,    0,  161,  160,  162,  163,    0,

      159,  162,  161,    0,    0,  160,  162,    0,  163,  159,
      163,  161,    0,  162,  160,  164,    0,  163,  161,  165,
      161,    0,  162,    0,  163,  164,  162,    0,  164,  165,
      166,  162,    0,  163,  164,  163,    0,    0,  165,    0,
      166,  164,  163,    0,    0,  165,    0,    0,    0,  166,
      164,    0,    0,  164,  165,    0,  166,    0,    0,  164,
        0,    0,    0,  165,    0,  166,  168,  168,  168,  168,
      168,    0,    0,    0,  166,  169,  169,  169,  169,  169,
      170,  170,  170,  170,  170,  171,  171,  171,  171,  171,
      177,    0,  171,  173,  173,  173,  173,  173,  168,  177,

        0,  173,    0,  177,    0,    0,  170,  169,    0,    0,
        0,    0,  170,    0,    0,    0,  177,  171,  171,  174,
      174,  174,  174,  174,  177,  173,    0,  173,  177,    0,
        0,  170,  175,  175,  175,  175,  175,    0,    0,    0,
      174,  176,  176,  176,  176,  176,  178,    0,    0,  178,
        0,  174,    0,    0,    0,  178,    0,  175,    0,  178,
        0,    0,  176,    0,  175,  174,    0,    0,  179,    0,
      180,    0,  178,  176,    0,  178,    0,  179,    0,  180,
      178,  179,  175,  180,  178,  179,    0,  176,  182,  181,
      181,    0,    0,    0,  179,    0,  180,  182,    0,  181,

        0,  182,  179,  181,  180,    0,  179,    0,  180,    0,
      179,    0,  183,    0,  182,  181,  181,    0,  184,    0,
        0,  183,  182,  185,  181,  183,  182,  184,  181,  183,
        0,  184,  185,    0,  186,    0,  185,  186,  183,    0,
        0,    0,    0,  186,  184,    0,  183,  186,    0,  185,
      183,    0,  184,  187,  183,    0,  184,  185,  188,    0,
      186,  185,  187,  186,  189,    0,  187,  188,  186,  191,
        0,  188,  186,  189,    0,  195,    0,  189,  191,  187,
      190,    0,  191,  190,  188,  195,    0,  187,    0,  190,
      189,  187,  188,  190,  195,  191,  188,    0,  189,  192,

        0,  195,  189,  191,  193,    0,  190,  191,  192,  190,
      195,    0,  192,  193,  190,    0,    0,  193,  190,  195,
        0,    0,  197,    0,  213,  192,    0,  213,    0,    0,
      193,  213,  197,  192,    0,  197,    0,  192,  193,  196,
        0,  197,  193,  194,  194,  194,  194,  194,  197,  196,
      213,    0,  194,  213,  196,  194,  213,  197,  196,    0,
      197,    0,    0,    0,    0,  196,  197,  198,  198,  198,
      198,  198,    0,    0,  196,  194,    0,  198,  194,  196,
        0,  194,    0,  196,  199,  199,  199,  199,  199,    0,
        0,    0,  202,  199,  200,  200,  200,  200,  200,  198,

        0,    0,  202,  198,  200,  201,  201,  201,  201,  201,
        0,  202,  203,    0,    0,  201,  199,    0,  202,  199,
        0,  203,  204,    0,    0,  203,  200,  202,    0,    0,
      200,  204,  204,    0,    0,  204,  202,  201,  203,    0,
      205,  201,  206,    0,    0,  207,  203,    0,  204,  205,
      203,  206,    0,  205,  207,  206,  204,  204,  207,    0,
      204,  228,  228,  228,  228,  228,  205,    0,  206,    0,
        0,  207,  208,  209,  205,    0,  206,    0,  205,  207,
      206,  208,  209,  207,    0,  208,  209,  208,  210,  210,
      210,  210,  210,  228,    0,    0,    0,    0,  208,  209,

      211,  211,  211,  211,  211,  212,  208,  209,    0,  210,
      208,  209,  208,    0,  212,  211,  219,    0,  212,  219,
      210,    0,  212,  219,    0,  214,    0,  219,    0,    0,
      214,  212,  211,  214,  210,    0,    0,  214,    0,  212,
        0,  211,  219,  212,    0,  219,    0,  212,  219,    0,
        0,  214,  219,    0,    0,    0,  214,    0,    0,  214,
        0,    0,  214,  215,  215,  215,  215,  215,  216,  216,
      216,  216,  216,  217,  217,  217,  217,  217,  215,  218,
      218,  218,  218,  218,    0,  216,  220,    0,  217,  220,
      218,  221,    0,  220,  221,  215,    0,    0,  221,    0,

      216,    0,    0,    0,  215,  217,    0,    0,    0,  221,
      216,  218,  220,    0,  217,  220,  218,  221,  220,    0,
      221,    0,    0,  221,  222,  222,  222,  222,  222,  223,
      223,  223,  223,  223,  221,    0,  225,  224,    0,  226,
      224,    0,    0,  222,  224,  225,    0,  223,  226,  225,
        0,    0,  226,    0,    0,    0,  222,    0,    0,    0,
        0,  223,  225,  224,    0,  226,  224,    0,  222,  224,
      225,    0,  223,  226,  225,    0,    0,  226,  227,  227,
      227,  227,  227,  229,  229,  229,  229,  229,  230,  230,
      230,  230,  230,  231,    0,  232,  231,    0,  232,    0,

      231,  227,  232,    0,    0,    0,  229,    0,    0,    0,
      227,    0,    0,    0,    0,  229,    0,    0,    0,  231,
      230,  232,  231,    0,  232,  231,  227,  232,    0,    0,
        0,  229,  233,  233,  233,  233,  233,  234,  234,  234,
      234,  234,  235,  236,  236,  236,  236,  236,  234,    0,
        0,    0,  235,    0,  233,  237,  237,  237,  237,  237,
        0,  235,    0,  238,  233,    0,    0,    0,  235,  234,
        0,    0,  238,    0,  234,  236,  238,  235,    0,  233,
      239,  239,  239,  239,  239,    0,  235,  237,    0,  238,
      240,  240,  240,  240,  240,  241,    0,  238,  239,    0,

      242,  238,    0,    0,  241,    0,    0,    0,  241,  242,
        0,    0,  239,  242,  243,  243,  243,  243,  243,    0,
        0,  241,  240,  239,    0,  243,  242,    0,    0,  241,
        0,    0,    0,  241,  242,    0,    0,    0,  242,  244,
      244,  244,  244,  244,    0,    0,  243,    0,    0,    0,
        0,  243,    0,    0,  245,  245,  245,  245,  245,    0,
        0,    0,    0,    0,  244,  245,  246,  246,  246,  246,
      246,  244,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  245,    0,    0,  244,
        0,  245,    0,    0,    0,    0,    0,    0,  246,  248,

      248,  249,  249,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[80] =
    {   0,
0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexico.l"
#line 4 "lexico.l"
#include <cstdlib>
#include "parser.h"
#include "command.h"
#include <stdio.h>
#include <iostream>
#include <list>

int yylex();
void yyerror(const char *s);
int linea=0; // Para contar lineas
int columna = 1; // para las columnas
int anterior = 0;
std::list<Command*> listCommand;
#line 1135 "scanner.cpp"
#line 1136 "scanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 33 "lexico.l"

#line 1353 "scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 248 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2504 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 34 "lexico.l"

	YY_BREAK

case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 36 "lexico.l"
{linea++;columna = 0;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return numero;}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 38 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return cadena;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 39 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pmkdisk;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 40 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return psize;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 41 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcont;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 42 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pfit;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 43 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return punit;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 44 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ppath;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 45 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return prmdisk;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 46 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pfdisk;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 47 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ptype;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 48 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pallocation;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 49 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pdetele;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 50 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pname;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 51 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return padd;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 52 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pmount;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 53 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return punmount;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 54 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pmkfs;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 55 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return plogin;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 56 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pusr;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 57 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ppwd;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 58 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return plogout;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 59 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pmkgrp;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 60 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return prmgrp;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 61 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pmkusr;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 62 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return prmusr;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 63 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pgrp;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 64 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pchmod;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 65 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pmkfile;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 66 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pmkdir;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 67 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pr;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 68 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pugo;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 69 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pid;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 70 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return prep;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 71 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pexec;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 72 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pb;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 73 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pk;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 74 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pm;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 75 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pc;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 76 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pix;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 77 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pbf;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 78 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pff;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 79 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pfs;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 80 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return p2fs;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 81 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return p3fs;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 82 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pwf;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 83 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pp;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 84 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pe;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 85 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pl;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 86 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pfast;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 87 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pfull;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 88 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pruta;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 89 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ploss;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 90 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return precovery;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 91 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pmbr;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 92 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pdisk;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 93 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pbm_arbdir;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 94 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pbm_detdir;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 95 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pbm_inode;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 96 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pbm_block;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 97 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pbitacora;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 98 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pdirectorio;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 99 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ptree_file;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 100 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return psb;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 101 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ptree_complete;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 102 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pls;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 103 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return id;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 104 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return igual;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 105 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return guion; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 106 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return mayorQ; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 107 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ampersand; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 108 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return porcentaje; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 109 "lexico.l"
{
                    strcpy(yylval.TEXT, yytext); columna=26;
                }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 112 "lexico.l"
{ columna++; }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 113 "lexico.l"
{linea++; columna = 0; anterior = 0;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 114 "lexico.l"
{
                    columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);
/*                    errorT *nuevoE = new errorT("Lexico",yytext,linea, columna);
*/

                    std::cout <<yytext <<" Error Lexico en la linea "<< linea << " Columna:"<< columna<<  std::endl;
                }
	YY_BREAK

case 79:
YY_RULE_SETUP
#line 122 "lexico.l"
ECHO;
	YY_BREAK
#line 1828 "scanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 248 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 248 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 247);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 122 "lexico.l"


